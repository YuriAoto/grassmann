#!/usr/bin/env python3
"""Grassmann

Try `Grassmann --help` for the usage.

Yuri Aoto, 2018, 2019, 2020
"""
import os
import sys
import logging
import traceback

import util
import memory
import parser
from main import main_grassmann
from molpro_util import MolproInputError

try:
    assert sys.version_info >= (3, 5)
except AssertionError:
    sys.exit('Python version 3.5 or later is required.')

try:
    args = parser.parse()
except parser.ParseError as e:
    sys.exit(str(e))

all_files = [args.output,
             args.logfile,
             args.outdir]

if any(map(os.path.exists, all_files)):
    i_backup = '_0'
    while (any([os.path.exists(f_name + i_backup)
                for f_name in all_files])):
        i_backup = '_' + str(int(i_backup[1:]) + 1)
    for f_to_rename in all_files:
        try:
            os.rename(f_to_rename,
                      f_to_rename + i_backup)
        except FileNotFoundError:
            pass

log_format = ('%(levelname)s: %(funcName)s - %(filename)s:'
              + '\n%(message)s\n')
logging.basicConfig(filename=args.logfile,
                    format=log_format,
                    filemode='w',
                    level=args.loglevel)
logger = logging.getLogger(__name__)
for handler in logging.root.handlers:
    handler.addFilter(util.LogFilter(args.logfilter))

with_error = False
with open(args.output, 'w') as f_out:
    try:
        main_grassmann(args, f_out)
    except MolproInputError as e:
        with_error = True
        error_msg = ('Error in Molpro file ' + str(e.file_name)
                     + ', line number ' + str(e.line_number) + ':\n'
                     + str(e.line) + '\n' + e.msg)
    except memory.MemoryExceededError as e:
        with_error = True
        error_msg = ('The memory limit of {0} {1} has been exceeded:'
                     + '\nAt "{2}" we needed {3} {1},'
                     + '\nbut we had only {4} {1}.').format(
                         args.memory[0],
                         args.memory[1],
                         e.action,
                         e.mem_required,
                         e.mem_remaining)
    except Exception as e:
        with_error = True
        error_msg = ('Error: ' + str(e)
                     + '\nHere is the traceback:\n' + traceback.format_exc())
    finally:
        if with_error and f_out is not None:
            f_out.write('\n' + error_msg)
        if with_error:
            sys.exit(error_msg)
exit()
