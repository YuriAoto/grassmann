#!/usr/bin/env python3
"""Grassmann

Try `Grassmann --help` for the usage.

Yuri Aoto, 2018, 2019, 2020
"""
import os
import sys
import logging
import traceback

import memory
import parser
from main import main_grassmann
from molpro_util import MolproInputError

assert sys.version_info >= (3, 5)
try:
    cmd_line_args = parser.parse_cmd_line()
except parser.ParseError as e:
    sys.exit(str(e))

if cmd_line_args.output is None:
    if cmd_line_args.input_is_geom:
        cmd_line_args.output = (cmd_line_args.basename[:-4] + '.out')
    else:
        name_extra = cmd_line_args.state
        if name_extra:
            name_extra = '_' + name_extra
        if cmd_line_args.at_ref:
            name_extra = '_atRef'
        cmd_line_args.output = (cmd_line_args.basename
                                + '.min_dist' + name_extra)

all_files = [cmd_line_args.output,
             cmd_line_args.output + '.log',
             cmd_line_args.output + '_U.npz',
             cmd_line_args.output + '_all_U']

if any(map(os.path.exists, all_files)):
    i_backup = '_0'
    while (any([os.path.exists(f_name + i_backup)
                for f_name in all_files])):
        i_backup = '_' + str(int(i_backup[1:]) + 1)
    for f_to_rename in all_files:
        try:
            os.rename(f_to_rename,
                      f_to_rename + i_backup)
        except FileNotFoundError:
            pass

if cmd_line_args.save_all_U:
    os.mkdir(all_files[3])

log_format = ('%(levelname)s: %(funcName)s - %(filename)s:'
              + '\n%(message)s\n')
logging.basicConfig(filename=all_files[1],
                    format=log_format,
                    filemode='w',
                    level=cmd_line_args.loglevel)
logger = logging.getLogger(__name__)


class myLogFilter():
    """Define a filter for logging, to be attached to all handlers."""
    def filter(self, rec):
        """Return a boolean, indicating whether rec will be logged or not."""
        if rec.funcName == '__enter__':
            rec.funcName = 'Entering time management'
        elif rec.funcName == '__exit__':
            rec.funcName = 'Finishing time management'
        if cmd_line_args.logfilter is not None:
            return not cmd_line_args.logfilter.search(rec.funcName) is None
        # Uncomment this to check for possible records to filter
        # print()
        # print(rec)
        # print(rec.__dict__)
        # print()
        return True


for handler in logging.root.handlers:
    handler.addFilter(myLogFilter())
f_out = None
with_error = False
try:
    f_out = open(cmd_line_args.output, 'w')
    main_grassmann(cmd_line_args, f_out)
except MolproInputError as e:
    with_error = True
    error_msg = ('Error in Molpro file ' + str(e.file_name)
                 + ', line number ' + str(e.line_number) + ':\n'
                 + str(e.line) + '\n' + e.msg)
except memory.MemoryExceededError as e:
    with_error = True
    error_msg = ('The memory limit of {0} {1} has been exceeded:'
                 + '\nAt "{2}" we needed {3} {1},'
                 + '\nbut we had only {4} {1}.').format(
                     cmd_line_args.memory[0],
                     cmd_line_args.memory[1],
                     e.action,
                     e.mem_required,
                     e.mem_remaining)
except Exception as e:
    with_error = True
    error_msg = ('Error: ' + str(e)
                 + '\nHere is the traceback:\n' + traceback.format_exc())
finally:
    if with_error and f_out is not None:
        f_out.write('\n' + error_msg)
    if f_out is not None:
        f_out.close()
    if with_error:
        sys.exit(error_msg)
exit()
